{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMbk4xwzx6UvbiH3kztUXfb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K-EkF4Rb0RAa","executionInfo":{"status":"ok","timestamp":1681678043182,"user_tz":240,"elapsed":10,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"44dbda2f-2e21-4e24-e268-3dfdbb58f4af"},"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}],"source":["def add(a, b):          # Define a function named 'add' that takes two parameters, a and b\n","    result = a + b      # Add the values of a and b, and store the result in a variable named 'result'\n","    return result       # Return the value of 'result' to the caller\n","\n","# Real-world application: You can use this function in a calculator program or any application that requires basic arithmetic operations.\n","\n","\n","print(add(1, 2))"]},{"cell_type":"code","source":["def divide(a, b):\n","  result = a / b\n","  return result\n","\n","print(divide(10, 5))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uxGCRNfn0k86","executionInfo":{"status":"ok","timestamp":1681678148604,"user_tz":240,"elapsed":302,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"88a18b55-3942-4ec7-aac2-aefd8bffc38e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.0\n"]}]},{"cell_type":"code","source":["def exponent(a, b):\n","  result = a ** b\n","  return result\n","\n","print(exponent(7, 12))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I9riaH2H0wkq","executionInfo":{"status":"ok","timestamp":1681678225314,"user_tz":240,"elapsed":5,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"2172403b-f227-423a-cb6c-f4208ac3b990"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13841287201\n"]}]},{"cell_type":"code","source":["def greet(name, greeting=\"Hello\"):  # Define a function named 'greet' that takes two parameters, name and an optional greeting with a default value of \"Hello\"\n","    print(greeting, name)           # Print the greeting followed by the name\n","\n","# Real-world application: This function can be used in an application that generates personalized greetings,\n","# such as an email marketing tool.\n","\n","\n"],"metadata":{"id":"Gg8UDV251RAV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def average(*numbers):                 # Define a function named 'average' that takes any number of arguments\n","    total = sum(numbers)               # Calculate the total by adding all the numbers\n","    count = len(numbers)               # Count the total number of elements in the input\n","    result = total / count             # Calculate the average by dividing the total by the count\n","    return result                      # Return the average value\n","\n","# Real-world application: This function can be used in a statistics application or any program that needs to find the average of a dataset.\n","\n","\n","def average(*numbers):\n","  total = sum(numbers)\n","  count = len(numbers)\n","  result = total / count\n","  return result\n","print(average(10, 5, 15))\n","# this will cause a division by zero error print(average())  # Output: 0.0 (average of zero numbers)\n","print(average(10))  # Output: 10.0 (average of one number)\n","print(average(1, 2, 3, 4, 5, 6, 7, 8, 9))  # Output: 5.0 (average of 9 numbers)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-G6-_RY21gcy","executionInfo":{"status":"ok","timestamp":1681679365771,"user_tz":240,"elapsed":262,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"da7ebf0d-eeb7-4b76-8ac5-a946468911f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10.0\n","10.0\n","5.0\n"]}]},{"cell_type":"code","source":["def average(*numbers):\n","  total = sum(numbers)\n","  count = len(numbers)\n","  result = total / count\n","  return result\n","\n","print(average(3,6,9))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QhXNOoHi5HRZ","executionInfo":{"status":"ok","timestamp":1681679533332,"user_tz":240,"elapsed":9,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"b9bc1db8-2778-43f0-c3f7-29eee0561d12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6.0\n"]}]},{"cell_type":"code","source":["def display_info(name, age, **kwargs):      # Define a function named 'display_info' that takes a name, age, and any number of keyword arguments\n","    print(\"Name:\", name)                   # Print the name\n","    print(\"Age:\", age)                     # Print the age\n","\n","    for key, value in kwargs.items():       # Iterate through the keyword arguments\n","        print(f\"{key}:\", value)             # Print the key and its corresponding value\n","\n","# Real-world application: This function can be used in a contact management system to display user profiles with various attributes.\n","\n","print(display_info(\"Mathew\", \"38\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VVt_N4175-fZ","executionInfo":{"status":"ok","timestamp":1681679670722,"user_tz":240,"elapsed":304,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"049f9b85-fe18-4438-ce81-59aa3410388b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: Mathew\n","Age: 38\n","None\n"]}]},{"cell_type":"code","source":["def apply_operation(a, b, operation):          # Define a function named 'apply_operation' that takes two numbers and an operation function\n","    return operation(a, b)                     # Apply the operation function to the two numbers and return the result\n","\n","addition = lambda a, b: a + b                  # Define a lambda function for addition\n","result = apply_operation(5, 3, addition)       # Call the apply_operation function with the numbers and the addition lambda function\n","\n","# Real-world application: This function can be used in a calculator application that allows users to apply custom operations on input numbers.\n","\n","\n","print(apply_operation(2, 3, addition))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"008D35ve6qlo","executionInfo":{"status":"ok","timestamp":1681679798286,"user_tz":240,"elapsed":212,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"1e943f35-aa25-4f9e-9cc4-7fbd0c31b540"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","source":["def square_elements(numbers):                                      # Define a function named 'square_elements' that takes a list of numbers\n","    return [number * number for number in numbers]                 # Return a new list containing the square of each number using a list comprehension\n","\n","# Real-world application: This function can be used in data analysis or scientific computing to perform element-wise operations on a dataset.\n","\n","def square_elements(numbers):\n","    if isinstance(numbers, list):  # If input is a list\n","        return [number * number for number in numbers]\n","    else:  # If input is a single number\n","        return numbers * numbers\n","\n","# Real-world application: This function can be used in data analysis or scientific computing to perform element-wise operations on a dataset.\n","\n","print(square_elements(5))  # Output: 25 (square of 5)\n","print(square_elements([1, 2, 3, 5, 8, 13, 21]))  # Output: [4, 16, 36, 64] (squares of the input numbers)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G4Oh-XBK67OR","executionInfo":{"status":"ok","timestamp":1681680151963,"user_tz":240,"elapsed":6,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"69823018-e158-4286-e9a5-d16d1c44dc30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["25\n","[1, 4, 9, 25, 64, 169, 441]\n"]}]},{"cell_type":"code","source":["def square_elements(numbers):\n","    return [number * number for number in numbers]\n","\n","# Real-world application: This function can be used in data analysis or scientific computing to perform element-wise operations on a dataset.\n","\n","input_list = [2, 4, 6, 8]  # Example input list\n","output_list = square_elements(input_list)  # Call the function with the input list\n","\n","print(output_list)  # Output: [4, 16, 36, 64] (squares of the input numbers)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NXGQdVlv7fgh","executionInfo":{"status":"ok","timestamp":1681679997823,"user_tz":240,"elapsed":11,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"bd28d7ac-ef6f-4f54-945c-c26da3ddc16b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 16, 36, 64]\n"]}]},{"cell_type":"code","source":["def factorial(n):                             # Define a function named 'factorial' that takes a single integer, n\n","    if n == 0 or n == 1:                      # Base case: if n is 0 or 1, return 1\n","        return 1\n","    else:\n","        return n * factorial(n - 1)           # Recursive case: return n multiplied by the factorial of n-1\n","\n","# Real-world application: This function can be used in combinatorics, probability theory, or other mathematical applications that involve factorials.\n"],"metadata":{"id":"Rw9eRbe98Fe2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(factorial(5))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NU_A5ace9AU4","executionInfo":{"status":"ok","timestamp":1681680461392,"user_tz":240,"elapsed":449,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"8a06b98e-c9db-4072-9501-c7d3ab5845a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["120\n"]}]},{"cell_type":"code","source":["def filter_even_numbers(numbers):                                     # Define a function named 'filter_even_numbers' that takes a list of numbers\n","    return list(filter(lambda number: number % 2 == 0, numbers))      # Return a new list containing only even numbers using the filter function and a lambda\n","\n","# Real-world application: This function can be used in data processing applications to filter data based on specific conditions or criteria.\n","\n","print(filter_even_numbers(4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":369},"id":"jsDepX1P9IQl","executionInfo":{"status":"error","timestamp":1681680601811,"user_tz":240,"elapsed":8,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"f561edcd-0081-40fb-ece3-f9126c59ce10"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-73-ace4811157a6>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Real-world application: This function can be used in data processing applications to filter data based on specific conditions or criteria.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilter_even_numbers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-73-ace4811157a6>\u001b[0m in \u001b[0;36mfilter_even_numbers\u001b[0;34m(numbers)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfilter_even_numbers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumbers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m                                     \u001b[0;31m# Define a function named 'filter_even_numbers' that takes a list of numbers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mnumber\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnumber\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m      \u001b[0;31m# Return a new list containing only even numbers using the filter function and a lambda\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Real-world application: This function can be used in data processing applications to filter data based on specific conditions or criteria.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'int' object is not iterable"]}]},{"cell_type":"code","source":["def filter_even_numbers(numbers):\n","    return list(filter(lambda number: number % 2 == 0, numbers))\n","\n","# Real-world application: This function can be used in data processing applications to filter data based on specific conditions or criteria.\n","\n","input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # Example input list\n","output_list = filter_even_numbers(input_list)  # Call the function with the input list\n","\n","print(output_list)  # Output: [2, 4, 6, 8] (even numbers from the input list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WYgvKl-K-Tvb","executionInfo":{"status":"ok","timestamp":1681680655248,"user_tz":240,"elapsed":281,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"4f83add1-4649-4727-e50d-62e0e1785c42"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 8]\n"]}]},{"cell_type":"code","source":["import functools\n","\n","def log_calls(func):                                       # Define a decorator function named 'log_calls' that takes a function, func\n","    @functools.wraps(func)\n","    def wrapper(*args, **kwargs):                          # Define the wrapper function to handle the function call\n","        print(f\"Calling {func.__name__} with {args}\")      # Log the function call with its arguments\n","        result = func(*args, **kwargs)                     # Call the original function with the provided arguments and capture the result\n","        return result                                      # Return the result of the function call\n","\n","@log_calls\n","def multiply(a, b):                                        # Define a function named 'multiply' that takes two numbers, a and b\n","    return a * b                                           # Return the product of a and b\n","\n","# Real-world application: This decorator can be used in any application where tracking or logging function calls is required for debugging or performance analysis.\n"],"metadata":{"id":"iyuxK2wj-mBP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def safe_divide(a, b):                   # Define a function named 'safe_divide' that takes two numbers, a and b\n","    try:\n","        result = a / b                   # Try to perform the division\n","    except ZeroDivisionError:            # If a ZeroDivisionError occurs\n","        print(\"Cannot divide by zero.\")  # Print an error message\n","        result = None                    # Set the result to None\n","    return result                        # Return the result, either the division result or None\n","\n","# Real-world application: This function can be used in applications that perform calculations where division by zero might occur, such as in mathematical or financial applications.\n","\n"],"metadata":{"id":"9raJMHdX_a8k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def print_info(*args, **kwargs):                    # Define a function named 'print_info' that takes any number of arguments and keyword arguments\n","    for index, value in enumerate(args):            # Iterate through the positional arguments\n","        print(f\"Positional argument {index}: {value}\")  # Print the index and value of each positional argument\n","\n","    for key, value in kwargs.items():               # Iterate through the keyword arguments\n","        print(f\"Keyword argument {key}: {value}\")   # Print the key and value of each keyword argument\n","\n","# Real-world application: This function can be used in debugging or logging to display the values of various arguments passed to a function.\n"],"metadata":{"id":"-zVnKAYU_fDN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def fibonacci(n):                              # Define a generator function named 'fibonacci' that takes a single argument, n\n","    a, b = 0, 1                               # Initialize the first two Fibonacci numbers, a and b\n","    for _ in range(n):                        # Iterate n times\n","        yield a                               # Yield the current Fibonacci number, a\n","        a, b = b, a + b                       # Update the Fibonacci numbers for the next iteration\n","\n","# Real-world application: This function can be used in mathematical applications, such as generating sequences or series, or in applications that require lazy evaluation.\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QxvWg_iK_qzK","executionInfo":{"status":"ok","timestamp":1681680999392,"user_tz":240,"elapsed":7,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"eae43cb9-a813-40cd-9dd4-7c9ca67850f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<generator object fibonacci at 0x7fd7b045df90>\n"]}]},{"cell_type":"code","source":["def fibonacci(n):\n","    a, b = 0, 1\n","    for _ in range(n):\n","        yield a\n","        a, b = b, a + b\n","\n","# Real-world application: This function can be used in mathematical applications, such as generating sequences or series, or in applications that require lazy evaluation.\n","\n","for fib_number in fibonacci(10):  # Generate the first 10 Fibonacci numbers and print each number\n","    print(fib_number)\n","def fibonacci(n):\n","    a, b = 0, 1\n","    for _ in range(n):\n","        yield a\n","        a, b = b, a + b\n","\n","# Real-world application: This function can be used in mathematical applications, such as generating sequences or series, or in applications that require lazy evaluation.\n","\n","for fib_number in fibonacci(1):  # Generate the first 10 Fibonacci numbers and print each number\n","    print(fib_number)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1I_MsCMB_xg8","executionInfo":{"status":"ok","timestamp":1681681362207,"user_tz":240,"elapsed":6,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"e7da1d3d-f266-455e-f5af-a53a2c39b4ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","1\n","2\n","3\n","5\n","8\n","13\n","21\n","34\n","0\n"]}]},{"cell_type":"code","source":["from typing import List\n","\n","def add_elements(numbers: List[int]) -> int:          # Define a function named 'add_elements' that takes a list of integers and returns an integer\n","    return sum(numbers)                               # Return the sum of the elements in the list\n","\n","# Real-world application: This function can be used in applications that require adding elements in a list, such as in data analysis or statistical computing. Type hints improve readability and help with error checking.\n"],"metadata":{"id":"pzt9dCjhAO9U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def make_multiplier(factor):                      # Define a function named 'make_multiplier' that takes a single argument, factor\n","    def multiplier(number):                       # Define an inner function named 'multiplier' that takes a single argument, number\n","        return number * factor                    # Return the product of the number and the factor\n","\n","    return multiplier                             # Return the inner function as the result\n","\n","times_two = make_multiplier(2)                    # Create a new function that multiplies its input by 2\n","result = times_two(5)                             # Call the new function with the input 5\n","\n","# Real-world application: This function can be used in applications that require generating functions with specific behavior at runtime.\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WAARZy1uBfLw","executionInfo":{"status":"ok","timestamp":1681681620216,"user_tz":240,"elapsed":273,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"9ac3eb1e-1642-4615-bd51-6c9c71f9f64b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<function make_multiplier.<locals>.multiplier at 0x7fd7b0397d30>\n"]}]},{"cell_type":"code","source":["def make_multiplier(factor):\n","    def multiplier(number):\n","        return number * factor\n","    return multiplier\n","\n","# Real-world application: This function can be used in applications that require generating functions with specific behavior at runtime.\n","\n","# Example 1: Create a function that multiplies its input by 2 and use it to multiply different numbers\n","times_two = make_multiplier(2)\n","print(times_two(5))  # Output: 10 (5 * 2)\n","print(times_two(10))  # Output: 20 (10 * 2)\n","\n","# Example 2: Create a function that multiplies its input by 3 and use it to multiply different numbers\n","times_three = make_multiplier(3)\n","print(times_three(5))  # Output: 15 (5 * 3)\n","print(times_three(10))  # Output: 30 (10 * 3)\n","\n","# Example 3: Create a function that multiplies its input by 0.5 and use it to multiply different numbers\n","times_half = make_multiplier(0.5)\n","print(times_half(5))  # Output: 2.5 (5 * 0.5)\n","print(times_half(10))  # Output: 5.0 (10 * 0.5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mG_71h6KB2RH","executionInfo":{"status":"ok","timestamp":1681681659277,"user_tz":240,"elapsed":13,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"624a339e-75a6-40fa-9e0e-34407072b43d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","20\n","15\n","30\n","2.5\n","5.0\n"]}]},{"cell_type":"code","source":["import aiohttp\n","import asyncio\n","\n","async def fetch(url: str) -> str:                           # Define an asynchronous function named 'fetch' that takes a URL and returns a string\n","    async with aiohttp.ClientSession() as session:          # Asynchronously create an HTTP session\n","        async with session.get(url) as response:            # Asynchronously send an HTTP GET request to the URL\n","            return await response.text()                    # Asynchronously read the response text and return it\n","\n","# Real-world application: This function can be used in web scraping or API-consuming applications that require fetching data from multiple sources concurrently, reducing overall execution time.\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":405},"id":"0RkoM7eDCbFh","executionInfo":{"status":"error","timestamp":1681681790858,"user_tz":240,"elapsed":8,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"fc5c5fe4-bf74-4df8-a476-55e4b4300e6d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-96-1a32e5585fbd>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0maiohttp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m                           \u001b[0;31m# Define an asynchronous function named 'fetch' that takes a URL and returns a string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0maiohttp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mClientSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m          \u001b[0;31m# Asynchronously create an HTTP session\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'aiohttp'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["!pip install aiohttp\n","import aiohttp\n","import asyncio\n","\n","async def fetch(url: str) -> str:\n","    async with aiohttp.ClientSession() as session:\n","        async with session.get(url) as response:\n","            return await response.text()\n","\n","# Real-world application: This function can be used in web scraping or API-consuming applications that require fetching data from multiple sources concurrently, reducing overall execution time.\n","\n","# Example input: Fetch the content of a website\n","url = \"https://www.python.org/\"\n","response_text = asyncio.run(fetch(url))\n","print(response_text)  # Output: HTML content of the Python website\n"],"metadata":{"id":"wKLDR_44C7M_","colab":{"base_uri":"https://localhost:8080/","height":531},"executionInfo":{"status":"error","timestamp":1681681931994,"user_tz":240,"elapsed":4733,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"49226f6d-2828-45fd-cf98-e449f04b0571"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.9/dist-packages (3.8.4)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (22.2.0)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (4.0.2)\n","Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (2.0.12)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (1.3.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (6.0.4)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (1.3.3)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp) (1.8.2)\n","Requirement already satisfied: idna>=2.0 in /usr/local/lib/python3.9/dist-packages (from yarl<2.0,>=1.0->aiohttp) (3.4)\n"]},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-99-ead89e4a5c1d>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# Example input: Fetch the content of a website\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"https://www.python.org/\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mresponse_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse_text\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Output: HTML content of the Python website\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.9/asyncio/runners.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(main, debug)\u001b[0m\n\u001b[1;32m     31\u001b[0m     \"\"\"\n\u001b[1;32m     32\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_running_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         raise RuntimeError(\n\u001b[0m\u001b[1;32m     34\u001b[0m             \"asyncio.run() cannot be called from a running event loop\")\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: asyncio.run() cannot be called from a running event loop"]}]},{"cell_type":"code","source":["def read_lines(file_path):                          # Define a function named 'read_lines' that takes a file path\n","    with open(file_path, 'r') as file:              # Open the file in read mode\n","        while (line := file.readline().strip()):    # Use the walrus operator to read a line and check if it's not empty\n","            print(line)                             # Print the non-empty line\n","\n","# Real-world application: This function can be used in file processing applications to read and process text files line by line.\n"],"metadata":{"id":"8VW31dwHDxn1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections.abc import Iterable\n","\n","def flatten(items):                                     # Define a function named 'flatten' that takes an iterable, items\n","    def flatten_iterable(items):                        # Define a nested function named 'flatten_iterable' that takes an iterable, items\n","        for item in items:                              # Iterate over each item in the iterable\n","            if isinstance(item, Iterable):              # If the item is an iterable itself\n","                yield from flatten_iterable(item)       # Recursively call the nested function to flatten it\n","            else:\n","                yield item                               # If the item is not an iterable, yield it directly\n","\n","    return list(flatten_iterable(items))                # Call the nested function and return the result as a list\n","\n","# Real-world application: This function can be used in data processing applications to flatten nested data structures, such as lists or dictionaries.\n"],"metadata":{"id":"YLvSezriEdVk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["items = [1, 2, 3, 4, 5]\n","result = flatten(items)\n","print(result)\n","# Output: [1, 2, 3, 4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0ehvjhajEhL2","executionInfo":{"status":"ok","timestamp":1681682266932,"user_tz":240,"elapsed":318,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"870258b3-fe6c-4711-fcd8-488816961485"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/lib/python3.9/abc.py:123: RuntimeWarning: coroutine 'fetch' was never awaited\n","  return _abc_subclasscheck(cls, subclass)\n","RuntimeWarning: Enable tracemalloc to get the object allocation traceback\n","/usr/lib/python3.9/abc.py:123: RuntimeWarning: coroutine 'main' was never awaited\n","  return _abc_subclasscheck(cls, subclass)\n","RuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"]}]},{"cell_type":"code","source":["items = [1, [2, 3], [4, [5, 6]], 7]\n","result = flatten(items)\n","print(result)\n","# Output: [1, 2, 3, 4, 5, 6, 7]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y7a--CsDEvjG","executionInfo":{"status":"ok","timestamp":1681682277110,"user_tz":240,"elapsed":257,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"5f9e0fdd-66fb-4919-998a-77294da09996"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7]\n"]}]},{"cell_type":"code","source":["items = [{'a': 1, 'b': 2}, {'c': 3, 'd': [4, 5]}]\n","result = flatten(items)\n","print(result)\n","# Output: [1, 2, 3, 4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":465},"id":"rTh8K86-EyBJ","executionInfo":{"status":"error","timestamp":1681682291245,"user_tz":240,"elapsed":4233,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"03cd3207-7fa1-49ad-b255-bf4e6a04b7ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/lib/python3.9/traceback.py:276: RuntimeWarning: coroutine 'main' was never awaited\n","  return iter([self.filename, self.lineno, self.name, self.line])\n","RuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"]},{"output_type":"error","ename":"RecursionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRecursionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-107-b4c4a99b5fd8>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mitems\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'd'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Output: [1, 2, 3, 4, 5]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-104-63370fc5e0b4>\u001b[0m in \u001b[0;36mflatten\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mitem\u001b[0m                               \u001b[0;31m# If the item is not an iterable, yield it directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflatten_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m                \u001b[0;31m# Call the nested function and return the result as a list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Real-world application: This function can be used in data processing applications to flatten nested data structures, such as lists or dictionaries.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-104-63370fc5e0b4>\u001b[0m in \u001b[0;36mflatten_iterable\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[0;34m:\u001b[0m                              \u001b[0;31m# Iterate over each item in the iterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m              \u001b[0;31m# If the item is an iterable itself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflatten_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m       \u001b[0;31m# Recursively call the nested function to flatten it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mitem\u001b[0m                               \u001b[0;31m# If the item is not an iterable, yield it directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","... last 1 frames repeated, from the frame below ...\n","\u001b[0;32m<ipython-input-104-63370fc5e0b4>\u001b[0m in \u001b[0;36mflatten_iterable\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[0;34m:\u001b[0m                              \u001b[0;31m# Iterate over each item in the iterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m              \u001b[0;31m# If the item is an iterable itself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflatten_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m       \u001b[0;31m# Recursively call the nested function to flatten it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mitem\u001b[0m                               \u001b[0;31m# If the item is not an iterable, yield it directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRecursionError\u001b[0m: maximum recursion depth exceeded in comparison"]}]},{"cell_type":"code","source":["items = {'a': {'b': {'c': 1, 'd': 2}, 'e': 3}, 'f': 4}\n","result = flatten(items)\n","print(result)\n","# Output: [1, 2, 3, 4]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"hCFp8c1YE0Z0","executionInfo":{"status":"error","timestamp":1681682312597,"user_tz":240,"elapsed":4016,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"425302de-538c-4a7d-b0bf-f0cab9ee8dba"},"execution_count":null,"outputs":[{"output_type":"error","ename":"RecursionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRecursionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-108-b0a00131f52d>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mitems\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'b'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'd'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'e'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Output: [1, 2, 3, 4]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-104-63370fc5e0b4>\u001b[0m in \u001b[0;36mflatten\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mitem\u001b[0m                               \u001b[0;31m# If the item is not an iterable, yield it directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflatten_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m                \u001b[0;31m# Call the nested function and return the result as a list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Real-world application: This function can be used in data processing applications to flatten nested data structures, such as lists or dictionaries.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-104-63370fc5e0b4>\u001b[0m in \u001b[0;36mflatten_iterable\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[0;34m:\u001b[0m                              \u001b[0;31m# Iterate over each item in the iterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m              \u001b[0;31m# If the item is an iterable itself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflatten_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m       \u001b[0;31m# Recursively call the nested function to flatten it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mitem\u001b[0m                               \u001b[0;31m# If the item is not an iterable, yield it directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","... last 1 frames repeated, from the frame below ...\n","\u001b[0;32m<ipython-input-104-63370fc5e0b4>\u001b[0m in \u001b[0;36mflatten_iterable\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[0;34m:\u001b[0m                              \u001b[0;31m# Iterate over each item in the iterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m              \u001b[0;31m# If the item is an iterable itself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflatten_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m       \u001b[0;31m# Recursively call the nested function to flatten it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mitem\u001b[0m                               \u001b[0;31m# If the item is not an iterable, yield it directly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRecursionError\u001b[0m: maximum recursion depth exceeded in comparison"]}]},{"cell_type":"code","source":["from collections.abc import Iterable\n","\n","def flatten(items):\n","    stack = [items]\n","    result = []\n","    while stack:\n","        item = stack.pop()\n","        if isinstance(item, Iterable):\n","            for subitem in reversed(item):\n","                stack.append(subitem)\n","        else:\n","            result.append(item)\n","    return result\n","items = [{'a': 1, 'b': 2}, {'c': 3, 'd': [4, 5]}]\n","result = flatten(items)\n","print(result)\n","# Output: [1, 2, 3, 4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":369},"id":"wPz1SIvNE5uw","executionInfo":{"status":"error","timestamp":1681682966868,"user_tz":240,"elapsed":55850,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"67395b31-5be4-43b9-e4b9-71d5f70be721"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-109-1c5e9e542405>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mitems\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'd'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# Output: [1, 2, 3, 4, 5]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-109-1c5e9e542405>\u001b[0m in \u001b[0;36mflatten\u001b[0;34m(items)\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0msubitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreversed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m                 \u001b[0mstack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["def unique_elements(*lists):                              # Define a function named 'unique_elements' that takes any number of lists\n","    return {element for lst in lists for element in lst}  # Return a set of unique elements using a set comprehension that iterates over all lists and elements\n","\n","# Real-world application: This function can be used in data processing applications to find the unique elements from multiple lists, such as merging data from different sources.\n","# Example input: Find the unique elements from multiple lists\n","list1 = [1, 2, 3, 4]\n","list2 = [3, 4, 5, 6]\n","list3 = [4, 5, 6, 7]\n","\n","result = unique_elements(list1, list2, list3)\n","print(result)  # Output: {1, 2, 3, 4, 5, 6, 7}\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iEENSJpvHM2h","executionInfo":{"status":"ok","timestamp":1681683448732,"user_tz":240,"elapsed":458,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"c36de37c-3253-449d-8673-f265b1ed6dbd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 4, 5, 6, 7}\n"]}]},{"cell_type":"code","source":["import time\n","\n","def run_task(callback=None):                        # Define a function named 'run_task' that takes an optional callback function\n","    total_steps = 10                                # Set the total number of steps for the task\n","    for step in range(1, total_steps + 1):          # Iterate through the steps\n","        time.sleep(0.5)                             # Simulate task progress by sleeping for 0.5 seconds\n","        if callback:                                # If a callback function is provided\n","            callback(step, total_steps)             # Call the callback function with the current step and total steps\n","\n","def progress_callback(step, total_steps):           # Define a function named 'progress_callback' that takes the current step and total steps\n","    print(f\"Step {step} of {total_steps}\")          # Print the progress\n","\n","# Real-world application: This function can be used in applications that require monitoring the progress of a long-running task, such as file downloads, data processing, or batch operations.\n"],"metadata":{"id":"zkCvJokjHqhl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def sum_of_squares(numbers):                            # Define a function named 'sum_of_squares' that takes a list of numbers\n","    return sum((number * number for number in numbers)) # Return the sum of squares using a generator expression\n","\n","# Real-world application: This function can be used in data analysis or scientific computing to perform element-wise operations on a dataset, while keeping memory usage low.\n","\n","# Example input: Calculate the sum of squares of a list of numbers\n","numbers = [7, 12,]\n","\n","result = sum_of_squares(numbers)\n","print(result)  # Output: 55\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DV29D1w1JfB-","executionInfo":{"status":"ok","timestamp":1681683680516,"user_tz":240,"elapsed":7,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"c450c070-2f82-4ceb-b9d3-fa516fea19e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["193\n"]}]},{"cell_type":"code","source":["class Person:\n","    def __init__(self, name, age):         # Define the class constructor with name and age parameters\n","        self.name = name\n","        self.age = age\n","\n","    @classmethod                            # Define a class method using the classmethod decorator\n","    def from_dict(cls, data):               # Define a function named 'from_dict' that takes a dictionary, data\n","        return cls(data['name'], data['age'])\n","# Example input: Create a Person object from a dictionary\n","data = {'name': 'Alice', 'age': 30}\n","\n","person = Person.from_dict(data)\n","print(person.name)  # Output: 'Alice'\n","print(person.age)   # Output: 30\n"],"metadata":{"id":"iECUeo3KJqxU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681683824696,"user_tz":240,"elapsed":395,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"764f26fe-2ac4-491b-da33-334fbc37f56c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Alice\n","30\n"]}]},{"cell_type":"code","source":["from contextlib import contextmanager\n","\n","@contextmanager                                    # Define a context manager using the contextmanager decorator\n","def timed_operation(description):                 # Define a function named 'timed_operation' that takes a string, description\n","    start_time = time.time()                      # Record the start time\n","    try:\n","        yield                                     # Yield control to the body of the 'with' statement\n","    finally:\n","        end_time = time.time()                    # Record the end time\n","        duration = end_time - start_time          # Calculate the duration\n","        print(f\"{description} took {duration:.2f} seconds\")  # Print the operation description and duration\n","\n","# Real-world application: This function can be used in performance analysis or profiling to measure the execution time of code blocks.\n","# Example input: Measure the execution time of a code block\n","with timed_operation(\"Sleeping for 2 seconds\"):\n","    time.sleep(2)\n","\n","# Output: \"Sleeping for 2 seconds took 2.00 seconds\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cH95m_HoKi4e","executionInfo":{"status":"ok","timestamp":1681683938323,"user_tz":240,"elapsed":2505,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"12e096d9-5fdc-455f-819f-d3972993cf62"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sleeping for 2 seconds took 2.00 seconds\n"]}]},{"cell_type":"code","source":["from typing import Optional\n","\n","def power(base: float, exponent: Optional[float] = None) -> float:  # Define a function named 'power' that takes a base and an optional exponent\n","    if exponent is None:                                            # If the exponent is not provided\n","        return base * base                                          # Return the square of the base\n","    else:\n","        return base ** exponent                                     # Return the base raised to the exponent\n","\n","# Real-world application: This function can be used in mathematical applications that involve calculating powers or in scientific computing.\n","\n","# Example input: Calculate the square of a number\n","result1 = power(5)\n","print(result1)  # Output: 25.0\n","\n","# Example input: Calculate the power of a number\n","result2 = power(2, 3)\n","print(result2)  # Output: 8.0\n","\n","# Example input: Calculate the power of a fraction\n","result3 = power(0.5, 2)\n","print(result3)  # Output: 0.25\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9R-QM0fjLDEW","executionInfo":{"status":"ok","timestamp":1681684002962,"user_tz":240,"elapsed":7,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"75122390-3027-48e4-dbd2-742bf85dc9a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["25\n","8\n","0.25\n"]}]},{"cell_type":"code","source":["from functools import lru_cache\n","\n","@lru_cache(maxsize=None)                        # Decorate the function with lru_cache to enable memoization\n","def fibonacci_memo(n):                          # Define a function named 'fibonacci_memo' that takes a single integer, n\n","    if n == 0 or n == 1:                        # Base case: if n is 0 or 1, return n\n","        return n\n","    else:\n","        return fibonacci_memo(n - 1) + fibonacci_memo(n - 2)  # Recursive case: return the sum of the previous two Fibonacci numbers\n","\n","# Real-world application: This function can be used in mathematical applications that require the efficient calculation of Fibonacci numbers or similar recursive problems.\n","\n","# Calculate the first 10 Fibonacci numbers\n","for i in range(10):\n","    print(fibonacci_memo(i))\n","\n","# Calculate the 50th Fibonacci number\n","print(fibonacci_memo(50))\n","\n","# Calculate the 100th Fibonacci number\n","print(fibonacci_memo(100))\n","\n","print(fibonacci_memo(1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PgFCNgj_LXOb","executionInfo":{"status":"ok","timestamp":1681684232585,"user_tz":240,"elapsed":6,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"1426c3a2-479d-4856-9c1b-daa935d03e68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","1\n","2\n","3\n","5\n","8\n","13\n","21\n","34\n","12586269025\n","354224848179261915075\n","233\n"]}]},{"cell_type":"code","source":["def reverse_list(items):               # Define a function named 'reverse_list' that takes a list of items\n","    return items[::-1]                 # Return the reversed list using slicing with a step of -1\n","\n","items = [1, 2, 3, 4, 5]\n","print(reverse_list(items))\n","# Real-world application: This function can be used in data manipulation applications to reverse the order of elements in a list, such as sorting or displaying data.\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ULR5jwnRLox5","executionInfo":{"status":"ok","timestamp":1681684319378,"user_tz":240,"elapsed":6,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"a27c13f4-8726-4af8-d3bd-f6994907edf2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 4, 3, 2, 1]\n"]}]},{"cell_type":"code","source":["def max_of_two(a, b):                 # Define a function named 'max_of_two' that takes two numbers, a and b\n","    return a if a > b else b          # Return the maximum of the two numbers using the ternary operator\n","\n","# Real-world application: This function can be used in applications that require finding the maximum value between two numbers, such as in sorting algorithms or optimization problems.\n","\n","print(max_of_two(5, 10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3VxCjZaeMZGi","executionInfo":{"status":"ok","timestamp":1681684386692,"user_tz":240,"elapsed":7,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"4e18aaab-c68a-4cef-d356-97ab918d8c2f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n"]}]},{"cell_type":"code","source":["def invert_dictionary(dictionary):                             # Define a function named 'invert_dictionary' that takes a dictionary\n","    return {value: key for key, value in dictionary.items()}   # Return an inverted dictionary using a dictionary comprehension that swaps the keys and values\n","\n","# Real-world application: This function can be used in data processing applications to invert dictionaries, such as in transforming data or creating lookup tables.\n","\n","my_dict = {'apple': 'fruit', 'carrot': 'vegetable', 'strawberry': 'fruit', 'broccoli': 'vegetable'}\n","inverted_dict = invert_dictionary(my_dict)\n","print(inverted_dict)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlyFKY9QMuPe","executionInfo":{"status":"ok","timestamp":1681684450657,"user_tz":240,"elapsed":272,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"5b49f38b-dd13-45ce-b5ea-8ce6c46c2e1a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'fruit': 'strawberry', 'vegetable': 'broccoli'}\n"]}]},{"cell_type":"code","source":["import math\n","\n","def vector_length(vector):                        # Define a function named 'vector_length' that takes a list of numbers as a vector\n","    squared_sum = sum(x * x for x in vector)     # Calculate the sum of the squared components using a generator expression\n","    return math.sqrt(squared_sum)                # Return the square root of the squared sum (Euclidean norm)\n","\n","# Real-world application: This function can be used in applications that involve vector operations, such as in physics simulations, computer graphics, or machine learning.\n","\n","vector = [2, 3]\n","print(vector_length(vector))  # Output: 5.0\n","\n","vector = [5, 8]\n","print(vector_length(vector))\n","\n","vector = [13, 21]\n","print(vector_length(vector))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G2uK1rxeNElX","executionInfo":{"status":"ok","timestamp":1681684662979,"user_tz":240,"elapsed":7,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"c41642b9-d782-401e-97bd-355254e78e54"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.605551275463989\n","9.433981132056603\n","24.698178070456937\n"]}]},{"cell_type":"code","source":["from functools import partial\n","\n","def greet(greeting, name):         # Define a function named 'greet' that takes a greeting and a name\n","    return f\"{greeting}, {name}!\"\n","\n","hello = partial(greet, \"Hello\")    # Create a new function 'hello' that is a partial application of 'greet' with the greeting set to \"Hello\"\n","\n","# Real-world application: This function can be used in applications that require creating functions with preconfigured arguments, such as in event-driven systems or user interfaces.\n","\n","print(hello(\"Alice\"))    # Output: \"Hello, Alice!\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dvt-IATtNOQn","executionInfo":{"status":"ok","timestamp":1681684772946,"user_tz":240,"elapsed":225,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"14abf43d-f7a9-419d-a003-6f5c66fbadc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice!\n"]}]},{"cell_type":"code","source":["import itertools\n","\n","def group_consecutive_elements(items):          # Define a function named 'group_consecutive_elements' that takes a list of items\n","    groups = itertools.groupby(items)           # Use the 'groupby' function to create an iterable of groups of consecutive identical elements\n","    return [list(group) for _, group in groups] # Return a list of lists, where each inner list contains consecutive identical elements\n","\n","# Real-world application: This function can be used in data processing applications to group consecutive identical elements, such as in analyzing sequences or time series data.\n","items = ['a', 'a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']\n","print(group_consecutive_elements(items))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nuZVSnKzOTLx","executionInfo":{"status":"ok","timestamp":1681684840964,"user_tz":240,"elapsed":225,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"37606c27-bec7-4229-c68f-dc2097930717"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['a', 'a'], ['b'], ['c', 'c', 'c'], ['d'], ['e', 'e']]\n"]}]},{"cell_type":"code","source":["def divmod(a, b):\n","    quotient = a // b\n","    remainder = a % b\n","    return quotient, remainder\n","print(divmod(10,20))"],"metadata":{"id":"wVCdUIizOj8p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681697839559,"user_tz":240,"elapsed":7,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"6d8872e2-0420-472b-a598-67cd0a0c062d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(0, 10)\n"]}]},{"cell_type":"code","source":["def power(base, exponent=2):\n","    return base ** exponent\n","print(power(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pFvNoAlcADC3","executionInfo":{"status":"ok","timestamp":1681698253124,"user_tz":240,"elapsed":12,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"afb278a0-a8a5-485a-b8ef-b5ab01a69808"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["100\n"]}]},{"cell_type":"code","source":["def sum_numbers(*args):\n","    return sum(args)\n","print(sum_numbers(1, 2, 3))    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kReeyn17BuHE","executionInfo":{"status":"ok","timestamp":1681698357221,"user_tz":240,"elapsed":178,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"7ce81ef9-9354-4012-f6c3-f0cf330424e3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6\n"]}]},{"cell_type":"code","source":["def print_info(**kwargs):\n","    for key, value in kwargs.items():\n","        print(f\"{key}: {value}\")\n"],"metadata":{"id":"WSs_SNFMBxdy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def print_custom_greeting(*, name, greeting):\n","    print(f\"{greeting}, {name}!\")\n"],"metadata":{"id":"Nujh-E24COL4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define a function to read data from a file and return a list of numbers\n","def read_numbers_from_file(file_path):\n","    with open(file_path, 'r') as file:\n","        # Read the file contents and split the lines\n","        lines = file.readlines()\n","        # Convert each line to a number and return the list\n","        return [float(line.strip()) for line in lines]\n","\n","# Define a function to calculate the average of a list of numbers\n","def calculate_average(numbers):\n","    # Calculate the sum of numbers and divide it by the number of elements\n","    return sum(numbers) / len(numbers)\n","\n","# Read numbers from a file\n","file_path = 'numbers.txt'\n","numbers = read_numbers_from_file(file_path)\n","\n","# Calculate the average of the numbers\n","average = calculate_average(numbers)\n","print(f\"Average: {average}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":369},"id":"tpmgjnBVCRdU","executionInfo":{"status":"error","timestamp":1681698454478,"user_tz":240,"elapsed":129,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"48c239a6-f90e-4968-c9ab-e6fbe675fbf9"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-9546739c9f72>\u001b[0m in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Read numbers from a file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'numbers.txt'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mnumbers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_numbers_from_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m# Calculate the average of the numbers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-12-9546739c9f72>\u001b[0m in \u001b[0;36mread_numbers_from_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Define a function to read data from a file and return a list of numbers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mread_numbers_from_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m         \u001b[0;31m# Read the file contents and split the lines\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'numbers.txt'"]}]},{"cell_type":"code","source":["# Define a function to count the frequency of words in a text\n","def count_word_frequency(text):\n","    # Convert the text to lowercase and split it into words\n","    words = text.lower().split()\n","\n","    # Initialize an empty dictionary to store word frequencies\n","    word_freq = {}\n","\n","    # Iterate through the words and update the word frequencies\n","    for word in words:\n","        if word not in word_freq:\n","            word_freq[word] = 1\n","        else:\n","            word_freq[word] += 1\n","\n","    return word_freq\n","\n","# Sample text\n","text = \"Python is easy to learn. Python is versatile and powerful.\"\n","\n","# Count the frequency of words in the text\n","word_freq = count_word_frequency(text)\n","print(word_freq)\n"],"metadata":{"id":"fe47GUOpCfmc","executionInfo":{"status":"ok","timestamp":1681698472396,"user_tz":240,"elapsed":188,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"1e22a334-bf93-42c6-c456-59ce9568745c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["{'python': 2, 'is': 2, 'easy': 1, 'to': 1, 'learn.': 1, 'versatile': 1, 'and': 1, 'powerful.': 1}\n"]}]},{"cell_type":"code","source":["# Define a function to filter a list of strings based on their length\n","def filter_by_length(strings, min_length):\n","    # Use a list comprehension to filter strings based on their length\n","    return [string for string in strings if len(string) >= min_length]\n","\n","# Sample list of strings\n","strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\"]\n","\n","# Filter the list of strings by a minimum length\n","min_length = 5\n","filtered_strings = filter_by_length(strings, min_length)\n","print(filtered_strings)\n"],"metadata":{"id":"GWY-Fox9Cj_2","executionInfo":{"status":"ok","timestamp":1681698499414,"user_tz":240,"elapsed":190,"user":{"displayName":"Mathew Lipman","userId":"03766178537108172334"}},"outputId":"cf86f076-4aa1-4272-8355-f5b4a9056c1d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["['apple', 'banana', 'cherry', 'grape']\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ZvuTwe-UCql3"},"execution_count":null,"outputs":[]}]}